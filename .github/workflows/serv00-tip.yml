name: 批量保活进程

on:
  schedule:
    - cron: '3 22 * * *' #北京时间6点
  workflow_dispatch:

jobs:
  serv00-tip:
    runs-on: ubuntu-latest
    steps:
      - name: Set up and install dependencies
        run: |
          echo "开始设置和安装依赖包..."
          sudo apt-get update
          sudo apt-get install -y sshpass jq
          echo "依赖包安装完成。"

      - name: Run serv00 tip
        env:
          HOSTS_JSON: ${{ secrets.HOSTS_JSON }}
          TELEGRAM_TOKEN: ${{ secrets.TELEGRAM_TOKEN }}
          TELEGRAM_USERID: ${{ secrets.TELEGRAM_USERID }}
        run: |
          echo "开始运行主任务..."
          tgsend() {
            local message_text="$1"
            local MODE="HTML"
            local URL="https://api.telegram.org/bot${TELEGRAM_TOKEN}/sendMessage"
            if [[ -z "${TELEGRAM_TOKEN}" ]]; then
              echo "未配置TG推送"
            else
              local res=$(timeout 20s curl -s -X POST "$URL" -d chat_id="${TELEGRAM_USERID}" -d parse_mode="$MODE" -d text="$message_text")
              if [[ $? == 124 ]]; then
                echo 'TG_api请求超时,请检查网络是否重启完成并是否能够访问TG'
                exit 1
              fi
              local resSuccess=$(echo "$res" | jq -cr ".ok")
              if [[ "$resSuccess" == "true" ]]; then
                echo "TG推送成功"
              else
                echo "TG推送失败，请检查TG机器人token和ID"
              fi
            fi
          }
          # 使用 jq 提取 JSON 数组，并将其加载为 Bash 数组
          jq -cr '.info[]' <<<"${HOSTS_JSON}" | while read -r info; do
            user=$(jq -cr '.username' <<<"$info")
            host=$(jq -cr '.host' <<<"$info")
            port=$(jq -cr '.port' <<<"$info")
            pass=$(jq -cr '.password' <<<"$info")
            # 自定义执行命令
            script="uname -a && ps -o pid,%cpu,%mem,comm && exit"
            output=$(sshpass -p "$pass" ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -p "$port" -tt "$user@$host" bash -s <<<"$script" 2>/dev/null)
            # 等待执行
            sleep 5
            outputs=$(echo -e "\n主机: ${host}\n用户: ${user}\n日志: ${output}")
            echo "${outputs}" >> result.txt
            if echo "$output" | grep -q "$host"; then
              echo "登录成功"
              tgsend "登录成功请检查! ${outputs}"
            else
              echo "登录失败"
              tgsend "登录失败请检查! ${outputs}"
            fi
          done

      # 发送附件到邮件
      - name: Send email with attachments
        if: success()
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: ${{ secrets.MAILADDR }}
          server_port: ${{ secrets.MAILPORT }}
          username: ${{ secrets.MAILUSERNAME }}
          password: ${{ secrets.MAILPASSWORD }}
          subject: 创建 serv00 信息
          to: ${{ secrets.MAILSENDTO }}
          from: GitHub Actions
          body: run job of ${{ github.repository }} completed successfully!
          attachments: |
            result.txt

      - name: Run rm -frv result.txt
        run: |
          rm -frv result.txt
